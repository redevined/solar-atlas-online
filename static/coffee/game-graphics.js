// Generated by CoffeeScript 1.9.3
var ConnectionGraphics, InitGraphics,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

InitGraphics = (function() {
  function InitGraphics(game) {
    this.connections = new ConnectionGraphics(game);
  }

  return InitGraphics;

})();

ConnectionGraphics = (function() {
  function ConnectionGraphics(game1) {
    this.game = game1;
    this.render();
  }

  ConnectionGraphics.prototype.render = function() {
    var conn, k, len1, ref, ref1, ref2, ref3, ref4, surface, sys1, sys2, x1, x2, y1, y2;
    $("svg#surface").remove();
    surface = $("<svg id=\"surface\"></svg>");
    ref = this.filter(this.combinations(this.game.systems));
    for (k = 0, len1 = ref.length; k < len1; k++) {
      ref1 = ref[k], sys1 = ref1[0], sys2 = ref1[1];
      console.log([sys1, sys2]);
      ref2 = this.endpoints(sys1.pos, sys2.pos), (ref3 = ref2[0], x1 = ref3[0], y1 = ref3[1]), (ref4 = ref2[1], x2 = ref4[0], y2 = ref4[1]);
      conn = $("<line x1=\"" + x1 + "\" y1=\"" + y1 + "\" x2=\"" + x2 + "\" y2=\"" + y2 + "\" class=\"connection\" />");
      surface.append(conn);
    }
    this.game.e.append(surface);
    return surface.html(surface.html());
  };

  ConnectionGraphics.prototype.combinations = function(items) {
    var i, j, k, l, len, pairs, ref, ref1, ref2;
    pairs = [];
    len = items.length - 1;
    for (i = k = 0, ref = len; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = ref1 = i, ref2 = len; ref1 <= ref2 ? l <= ref2 : l >= ref2; j = ref1 <= ref2 ? ++l : --l) {
        if (i !== j) {
          pairs.push([items[i], items[j]]);
        }
      }
    }
    return pairs;
  };

  ConnectionGraphics.prototype.filter = function(systems) {
    return systems.filter(function(pair) {
      return pair[0].stars.filter(function(st) {
        var ref, st2;
        return ref = st.size, indexOf.call((function() {
          var k, len1, ref1, results;
          ref1 = pair[1].stars;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            st2 = ref1[k];
            results.push(st2.size);
          }
          return results;
        })(), ref) >= 0;
      }).length === 0;
    });
  };

  ConnectionGraphics.prototype.endpoints = function(a, b) {
    var a2, b2, d, i, len, v;
    d = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(a[i] - b[i]);
      }
      return results;
    })();
    len = Math.sqrt(d[0] * d[0] + d[1] * d[1]);
    v = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = d.length; k < len1; k++) {
        i = d[k];
        results.push((i / len) * 50);
      }
      return results;
    })();
    a2 = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(Math.round(a[i] - v[i]));
      }
      return results;
    })();
    b2 = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(Math.round(b[i] + v[i]));
      }
      return results;
    })();
    return [a2, b2];
  };

  return ConnectionGraphics;

})();

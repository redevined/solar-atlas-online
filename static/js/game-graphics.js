// Generated by CoffeeScript 1.9.3
var ConnectionGraphics, Graphics, OrbitGraphics, sysradius,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sysradius = 50;

Graphics = (function() {
  function Graphics(game, settings) {
    this.features = [];
    if (settings.connections) {
      this.features.push(new ConnectionGraphics(game));
    }
    if (settings.orbits) {
      this.features.push(new OrbitGraphics(game));
    }
    this.render(game.e);
  }

  Graphics.prototype.render = function(surface) {
    var feature, k, len1, ref, svg;
    $("svg#surface").remove();
    svg = $("<svg id=\"surface\"></svg>");
    ref = this.features;
    for (k = 0, len1 = ref.length; k < len1; k++) {
      feature = ref[k];
      feature.render(svg);
    }
    svg.html(svg.html());
    return surface.append(svg);
  };

  return Graphics;

})();

ConnectionGraphics = (function() {
  function ConnectionGraphics(game1) {
    this.game = game1;
  }

  ConnectionGraphics.prototype.render = function(surface) {
    var conn, k, len1, ref, ref1, ref2, ref3, ref4, results, sys1, sys2, x1, x2, y1, y2;
    ref = this.filter(this.combinations(this.game.systems));
    results = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      ref1 = ref[k], sys1 = ref1[0], sys2 = ref1[1];
      ref2 = this.endpoints(sys1.pos, sys2.pos), (ref3 = ref2[0], x1 = ref3[0], y1 = ref3[1]), (ref4 = ref2[1], x2 = ref4[0], y2 = ref4[1]);
      conn = $("<line x1=\"" + x1 + "\" y1=\"" + y1 + "\" x2=\"" + x2 + "\" y2=\"" + y2 + "\" class=\"connection\" />");
      results.push(surface.append(conn));
    }
    return results;
  };

  ConnectionGraphics.prototype.combinations = function(items) {
    var i, j, k, l, len, pairs, ref, ref1, ref2;
    pairs = [];
    len = items.length - 1;
    for (i = k = 0, ref = len; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = ref1 = i, ref2 = len; ref1 <= ref2 ? l <= ref2 : l >= ref2; j = ref1 <= ref2 ? ++l : --l) {
        if (i !== j) {
          pairs.push([items[i], items[j]]);
        }
      }
    }
    return pairs;
  };

  ConnectionGraphics.prototype.filter = function(systems) {
    return systems.filter(function(pair) {
      return pair[0].stars.filter(function(st) {
        var ref, st2;
        return ref = st.size, indexOf.call((function() {
          var k, len1, ref1, results;
          ref1 = pair[1].stars;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            st2 = ref1[k];
            results.push(st2.size);
          }
          return results;
        })(), ref) >= 0;
      }).length === 0;
    });
  };

  ConnectionGraphics.prototype.endpoints = function(a, b) {
    var a2, b2, d, i, len, v;
    d = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(a[i] - b[i]);
      }
      return results;
    })();
    len = Math.sqrt(d[0] * d[0] + d[1] * d[1]);
    v = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = d.length; k < len1; k++) {
        i = d[k];
        results.push((i / len) * sysradius);
      }
      return results;
    })();
    a2 = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(Math.round(a[i] - v[i]));
      }
      return results;
    })();
    b2 = (function() {
      var k, len1, ref, results;
      ref = [0, 1];
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        i = ref[k];
        results.push(Math.round(b[i] + v[i]));
      }
      return results;
    })();
    return [a2, b2];
  };

  return ConnectionGraphics;

})();

OrbitGraphics = (function() {
  function OrbitGraphics(game1) {
    this.game = game1;
  }

  OrbitGraphics.prototype.render = function(surface) {
    var cx, cy, i, k, l, len1, orbit, orbiter, ref, ref1, ref2, ref3, results, size, system, time, x, y;
    ref = this.game.systems;
    results = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      system = ref[k];
      ref1 = system.pos, x = ref1[0], y = ref1[1];
      orbit = $("<g transform=\"translate(" + x + "," + y + ")\">\n</g>");
      for (i = l = 0, ref2 = this.random(0, 2); 0 <= ref2 ? l <= ref2 : l >= ref2; i = 0 <= ref2 ? ++l : --l) {
        ref3 = this.randomPos(sysradius), cx = ref3[0], cy = ref3[1];
        size = this.random(4, 10);
        time = this.random(50, 100) / 10;
        orbiter = $("<circle cx=\"" + cx + "\" cy=\"" + cy + "\" r=\"" + size + "\" class=\"orbiter\" style=\"animation-duration: " + time + "s;\" />");
        orbit.append(orbiter);
      }
      results.push(surface.append(orbit));
    }
    return results;
  };

  OrbitGraphics.prototype.random = function(min, max) {
    return Math.round(Math.random() * (max - min)) + min;
  };

  OrbitGraphics.prototype.randomPos = function(r) {
    var k, len1, rad, ref, results, trig;
    rad = Math.random() * 2 * Math.PI;
    ref = [Math.sin, Math.cos];
    results = [];
    for (k = 0, len1 = ref.length; k < len1; k++) {
      trig = ref[k];
      results.push(Math.round(r * trig(rad)));
    }
    return results;
  };

  return OrbitGraphics;

})();

// Generated by CoffeeScript 1.9.3
var Actions, AttackActions, BuildActions, InitActions, MoveActions, TradeActions,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Actions = (function() {
  function Actions(game1) {
    this.game = game1;
    this.players = {
      active: this.game.getActivePlayer(),
      inactive: this.game.getInactivePlayer()
    };
  }

  return Actions;

})();

InitActions = (function(superClass) {
  extend(InitActions, superClass);

  function InitActions(game) {
    this.getAction = bind(this.getAction, this);
    this.setActionsSelectable = bind(this.setActionsSelectable, this);
    this.setSystemsSelectable = bind(this.setSystemsSelectable, this);
    InitActions.__super__.constructor.call(this, game);
    this.actions = {
      attack: new AttackActions(game),
      build: new BuildActions(game),
      trade: new TradeActions(game),
      move: new MoveActions(game)
    };
    this.setSystemsSelectable();
  }

  InitActions.prototype.setSystemsSelectable = function() {
    var i, len, results, system, systems;
    systems = this.game.systems;
    results = [];
    for (i = 0, len = systems.length; i < len; i++) {
      system = systems[i];
      results.push((function(_this) {
        return function(system) {
          return system.click("select", function() {
            var j, len1, results1;
            _this.setActionsSelectable(system);
            results1 = [];
            for (j = 0, len1 = systems.length; j < len1; j++) {
              system = systems[j];
              results1.push(system.unclick("select"));
            }
            return results1;
          });
        };
      })(this)(system));
    }
    return results;
  };

  InitActions.prototype.setActionsSelectable = function(system) {
    var i, len, piece, pieces, results;
    pieces = slice.call(system.stars).concat(slice.call(system.ships[this.players.active.id]));
    results = [];
    for (i = 0, len = pieces.length; i < len; i++) {
      piece = pieces[i];
      results.push((function(_this) {
        return function(piece) {
          return piece.click("action", function() {
            var j, len1, results1;
            _this.getAction(piece)(system);
            results1 = [];
            for (j = 0, len1 = pieces.length; j < len1; j++) {
              piece = pieces[j];
              results1.push(piece.unclick("action"));
            }
            return results1;
          });
        };
      })(this)(piece));
    }
    return results;
  };

  InitActions.prototype.getAction = function(piece) {
    switch (piece.color) {
      case "red":
        return this.actions.attack.setShipsCaptureable;
      case "green":
        return this.actions.build.setStashBuildable;
      case "blue":
        return this.actions.trade.setShipsTradable;
      case "yellow":
        return this.actions.move.setShipsMoveable;
    }
  };

  return InitActions;

})(Actions);

AttackActions = (function(superClass) {
  extend(AttackActions, superClass);

  function AttackActions() {
    this.attack = bind(this.attack, this);
    this.setShipsCaptureable = bind(this.setShipsCaptureable, this);
    return AttackActions.__super__.constructor.apply(this, arguments);
  }

  AttackActions.prototype.setShipsCaptureable = function(system) {
    var i, len, results, ship, ships;
    ships = system.ships[this.players.inactive.id].filter(function(s) {
      var sh;
      return s.size <= Math.max.apply(null, (function() {
        var i, len, ref, results;
        ref = system.ships[this.players.active.id];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          sh = ref[i];
          results.push(sh.size);
        }
        return results;
      }).call(this));
    });
    results = [];
    for (i = 0, len = ships.length; i < len; i++) {
      ship = ships[i];
      results.push((function(_this) {
        return function(ship) {
          return ship.click("attack", function() {
            var j, len1, results1;
            _this.attack(system, ship);
            results1 = [];
            for (j = 0, len1 = ships.length; j < len1; j++) {
              ship = ships[j];
              results1.push(ship.unclick("attack"));
            }
            return results1;
          });
        };
      })(this)(ship));
    }
    return results;
  };

  AttackActions.prototype.attack = function(system, ship) {};

  return AttackActions;

})(Actions);

BuildActions = (function(superClass) {
  extend(BuildActions, superClass);

  function BuildActions() {
    this.build = bind(this.build, this);
    this.setStashBuildable = bind(this.setStashBuildable, this);
    return BuildActions.__super__.constructor.apply(this, arguments);
  }

  BuildActions.prototype.setStashBuildable = function(system) {
    var cell, color, colors, ref, results, row, ship, stash;
    stash = this.game.stash;
    colors = (function() {
      var i, len, ref, results;
      ref = system.ships[this.players.active.id];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ship = ref[i];
        results.push(ship.color);
      }
      return results;
    }).call(this);
    ref = stash.stack;
    results = [];
    for (color in ref) {
      row = ref[color];
      if (indexOf.call(colors, color) >= 0) {
        cell = row.filter(function(r) {
          return r.length > 0;
        })[0];
        if (cell) {
          results.push((function(_this) {
            return function(color, cell) {
              return stash.click(color, cell[0].size, "build", function() {
                _this.build(system, cell);
                return stash.unclick("build");
              });
            };
          })(this)(color, cell));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  BuildActions.prototype.build = function(system, pieces) {};

  return BuildActions;

})(Actions);

TradeActions = (function(superClass) {
  extend(TradeActions, superClass);

  function TradeActions() {
    this.trade = bind(this.trade, this);
    this.setStashTradable = bind(this.setStashTradable, this);
    this.setShipsTradable = bind(this.setShipsTradable, this);
    return TradeActions.__super__.constructor.apply(this, arguments);
  }

  TradeActions.prototype.setShipsTradable = function(system) {
    var i, len, results, ship, ships;
    ships = system.ships[this.players.active.id];
    results = [];
    for (i = 0, len = ships.length; i < len; i++) {
      ship = ships[i];
      results.push((function(_this) {
        return function(ship) {
          return ship.click("trade_ship", function() {
            var j, len1, results1;
            _this.setStashTradable(system, ship);
            results1 = [];
            for (j = 0, len1 = ships.length; j < len1; j++) {
              ship = ships[j];
              results1.push(ship.unclick("trade_ship"));
            }
            return results1;
          });
        };
      })(this)(ship));
    }
    return results;
  };

  TradeActions.prototype.setStashTradable = function(system, ship) {
    var cell, color, ref, results, row, stash;
    stash = this.game.stash;
    ref = stash.stack;
    results = [];
    for (color in ref) {
      row = ref[color];
      cell = row[ship.size - 1];
      if (cell.length > 0) {
        results.push((function(_this) {
          return function(color, cell) {
            return stash.click(color, cell[0].size, "trade_stash", function() {
              _this.trade(system, ship, cell);
              return stash.unclick("trade_stash");
            });
          };
        })(this)(color, cell));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TradeActions.prototype.trade = function(system, ship, pieces) {};

  return TradeActions;

})(Actions);

MoveActions = (function(superClass) {
  extend(MoveActions, superClass);

  function MoveActions() {
    this.move = bind(this.move, this);
    this.discover = bind(this.discover, this);
    this.setNewSystemDiscoverable = bind(this.setNewSystemDiscoverable, this);
    this.setStashDiscoverable = bind(this.setStashDiscoverable, this);
    this.setSystemsVisitable = bind(this.setSystemsVisitable, this);
    this.setShipsMoveable = bind(this.setShipsMoveable, this);
    return MoveActions.__super__.constructor.apply(this, arguments);
  }

  MoveActions.prototype.setShipsMoveable = function(system) {
    var i, len, results, ship, ships;
    ships = system.ships[this.players.active.id];
    results = [];
    for (i = 0, len = ships.length; i < len; i++) {
      ship = ships[i];
      results.push((function(_this) {
        return function(ship) {
          return ship.click("move_ship", function() {
            var j, len1, results1;
            _this.setSystemsVisitable(system, ship);
            _this.setStashDiscoverable(system, ship);
            results1 = [];
            for (j = 0, len1 = ships.length; j < len1; j++) {
              ship = ships[j];
              results1.push(ship.unclick("move_ship"));
            }
            return results1;
          });
        };
      })(this)(ship));
    }
    return results;
  };

  MoveActions.prototype.setSystemsVisitable = function(system, ship) {
    var i, len, results, stash, systems, tsystem;
    stash = this.game.stash;
    systems = this.game.systems.filter(function(sys) {
      return sys.stars.filter(function(st) {
        var ref, st2;
        return ref = st.size, indexOf.call((function() {
          var i, len, ref1, results;
          ref1 = system.stars;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            st2 = ref1[i];
            results.push(st2.size);
          }
          return results;
        })(), ref) >= 0;
      }).length === 0;
    });
    results = [];
    for (i = 0, len = systems.length; i < len; i++) {
      tsystem = systems[i];
      results.push((function(_this) {
        return function(tsystem) {
          return tsystem.click("move_system", function() {
            var j, len1;
            _this.move(system, ship, tsystem);
            for (j = 0, len1 = systems.length; j < len1; j++) {
              system = systems[j];
              system.unclick("move_system");
            }
            return stash.unclick("discover_stash");
          });
        };
      })(this)(tsystem));
    }
    return results;
  };

  MoveActions.prototype.setStashDiscoverable = function(system, ship) {
    var color, ref, ref1, results, row, size, st, stash, systems;
    ref = [this.game.systems, this.game.stash], systems = ref[0], stash = ref[1];
    ref1 = stash.stack;
    results = [];
    for (color in ref1) {
      row = ref1[color];
      results.push((function() {
        var i, results1;
        results1 = [];
        for (size = i = 1; i <= 3; size = ++i) {
          if (indexOf.call((function() {
            var j, len, ref2, results2;
            ref2 = system.stars;
            results2 = [];
            for (j = 0, len = ref2.length; j < len; j++) {
              st = ref2[j];
              results2.push(st.size);
            }
            return results2;
          })(), size) < 0 && row[size - 1].length > 0) {
            results1.push((function(_this) {
              return function(color, row, size) {
                return stash.click(color, size, "discover_stash", function() {
                  var j, len, results2;
                  _this.setNewSystemDiscoverable(system, ship, row[size - 1]);
                  stash.unclick("discover_stash");
                  results2 = [];
                  for (j = 0, len = systems.length; j < len; j++) {
                    system = systems[j];
                    results2.push(system.unclick("move_system"));
                  }
                  return results2;
                });
              };
            })(this)(color, row, size));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  MoveActions.prototype.setNewSystemDiscoverable = function(system, ship, pieces) {
    return this.game.click("discover_newsystem", (function(_this) {
      return function(event) {
        var ref, x, y;
        if ((ref = $(event.target).attr("id")) === "game" || ref === "surface") {
          x = event.pageX - _this.game.e.offset().left;
          y = event.pageY - _this.game.e.offset().top;
          _this.discover(system, ship, pieces, [x, y]);
          return _this.game.unclick("discover_newsystem");
        }
      };
    })(this));
  };

  MoveActions.prototype.discover = function(system, ship, pieces, pos) {};

  MoveActions.prototype.move = function(system, ship, nextsys) {};

  return MoveActions;

})(Actions);
